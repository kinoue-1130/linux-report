epoll_wait()の活用
--------------------------

* epoll_wait()でできること
    * 受信可能かどうかのチェック
    * 送信可能かどうかのチェック
    * タイムアウトのチェック
    * 任意のタイミグでconnect()処理を終了させる
    * エラーがあるかないかのチェックなど

受信可能かどうかのチェック
^^^^^^^^^^^^^^^^^^^^^^

送信可能かどうかのチェック
^^^^^^^^^^^^^^^^^^^^^^

* 送信バッファが溢れる例
    * 意図的にソケットバッファから受信データをとり出さないことによって、送信側プログラムの送信用ソケットバッファを溢れさせている
    * 送信側のソケットバッファが埋まってしまって、送信側プログラム中のwrite()システムコールがブロックし続ける
* write()を行っている間は処理がブロックされ続けてしまう
    * このような状態を避けるためには、ソケットが送信可能な状態になっているかどうかチェックを行う
        * チェックを行うには、epoll_ctl()利用時にEPOLLOUTを設定する
    
    * TCPコネクションを確立した後に送信可能ならばデータを送信し、受信できるデータがあればデータを受信するサンプルプログラム(epoll-write.c)

タイムアウトのチェック
^^^^^^^^^^^^^^^^^^^^^^

connect()処理の終了
^^^^^^^^^^^^^^^^^^^^^^

* connect()が成功した時には迅速に正常処理をしつつ、任意のタイミングでconnect()処理を終了するプログラムを実装できる

epoll_wait()の解除
--------------------------

* epoll_wait()はブロッキングAPI
* epoll_wait()のループをbreakしたいときは、epoll_wait()を解除する必要がある

シグナルを送信する
^^^^^^^^^^^^^^^^

* epoll_wait()が行われているPIDに対してシグナルを送信して、epoll_wait()を解除する
* シグナルを送信する手法は、プロセス全体に影響を与える

ソケットペアを使う
^^^^^^^^^^^^^^^^

* シグナルを使用すると意図しない他のシステムコールに影響を与える危険性があるので、epoll_wait()を解除するときはソケットペアを利用するほうが安全
* pipe()を利用したり、localhost同士でのTCP接続でもepoll_wait()を停止させる処理が可能
