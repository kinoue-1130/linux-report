epoll
============

epoll
--------

* 複数のファイルディスクリプタから作業可能なものだけを選び出して利用したいときに、どのソケットからデータが受信可能かを教えてくれるのが、epoll
    * すべてのソケットをノンブロッキングに設定して入力があるまでポーリングすることも可能だが、効率が非常に悪いプログラムになる
* epollを使うと、データ受信可能なソケットでのみread()やrecv()を実行できる
* epollは以下３つのシステムコールをまとめて呼ぶ時の呼称
    * epoll_create()
    * epoll_ctl()
    * epoll_wait()

epoll_create()システムコール
--------------------------

* epollを構成する３つのシステムコールのうち、最初に利用するシステムコール
* epollで利用するためのインスタンスをカーネル内で生成し、そのファイルディスクリプタを返す
* (appendix.rst->epoll_create())

epoll_ctl()システムコール
--------------------------

* epoll_create()で作成したepollファイルディスクリプタに対して、準備待ちを行うファイルディスクリプタの関連付けを行うシステムコール
* epoll_event構造体に示された設定内容をepollファイルディスクリプタに反映
* epollの動作に関する設定も行うことができる
* (appendix.rst->epoll_ctl())

epoll_wait()システムコール
--------------------------

* 実際の準備待ちを行うシステムコール
* epollファイルディスクリプタepfdに設定されたイベントが発生するまで
* 受信可能かどうかだけでなく、送信可能かどうか、エラーがあるかないかなどもチェックできる（epoll_wait()の活用）
* epoll_ctl()で登録したファイルディスクリプタが入力/出力可能になるか、タイムアウトがくるまでブロックし続ける
* (appendix.rst->epoll_wait())


epoll_wait()の活用
========================

* epoll_wait()でできること
    * 受信可能かどうかのチェック
    * 送信可能かどうかのチェック
    * タイムアウトのチェック
    * 任意のタイミグでconnect()処理を終了させる
    * エラーがあるかないかのチェックなど
    

epoll_wait()の解除
========================

* epoll_wait()はブロッキングAPI
* epoll_wait()のループをbreakしたいときは、epoll_wait()を解除する必要がある

シグナルを送信する
------------------------

* epoll_wait()が行われているPIDに対してシグナルを送信して、epoll_wait()を解除する
* シグナルを送信する手法は、プロセス全体に影響を与える

ソケットペアを使う
------------------------

* シグナルを使用すると意図しない他のシステムコールに影響を与える危険性があるので、epoll_wait()を解除するときはソケットペアを利用するほうが安全
* pipe()を利用したり、localhost同士でのTCP接続でもepoll_wait()を停止させる処理が可能

引用
あきみち，”基礎と実装Linuxネットワークプログラミング”，株式会社品の出版，2010，pp.232-255.
