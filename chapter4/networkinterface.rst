ネットワークインターフェース情報の取得と設定
======================================

* ネットワークに関する各種情報を取得する方法や設定の方法を示す
    * 通信を行うことだけがネットワークプログラミングではなく、機器に設定されているIPアドレスや経路情報の取得、また各種パラメータを設定する場合もあるため

if_nametoindex()関数
--------------------

* インターフェースの名前から対応するインターフェース番号（インデックス）を取得
* 内部でソケットを作成
* (appendix.rst->if_nametoindex()関数)

if_indextoname()関数
----------------------

* インターフェース番号から対応するインターフェースの名前を取得
* 内部でソケットを作成
* (appendix.rst->if_indextoname()関数)

getifaddrs()関数
----------------------

* 以下の情報一覧を取得
    * IPアドレス
    * ネットマスク
    * ブロードキャストアドレス
    * フラグ
* IPv4,IPv6に対応したAPIとして提案されている
* (appendix.rst->getifaddrs()関数)
* getifaddrs()関数で取得したifaddrs構造体はfreeifaddrs()関数を利用して開放する必要がある(appendix.rst->ifaddrs構造体)

* インターフェース名だけが必要な場合はgetifaddrs()関数は不向き
    * getifaddrs()関数は、同じインターフェースに関する各種設定が要素の単位となり、同じインターフェースが重複して結果に含まれる
    * 例: ひとつのインターフェースにIPv4とIPv6の設定が両方とも行われていると、そのネットワークインターフェースは2度登場する
* インターフェースの配列のみを取得したい場合は別の方法を利用（以下の関数）
    * if_nameindex()関数
    * ioctl()関数

if_nameindex()関数
----------------------

* インターフェースの配列のみを取得

ioctl()関数
----------------------

* デバイスを制御
    * インターフェース名の一覧を受け取る
    * インターフェース名の変更
    * ハードウェアアドレスの取得/設定
    * IPアドレスの設定/削除
    * ネットマスクの設定
    * インターフェースの有効化/無効化
    * MTUの取得/設定
* (appendix.rst->ioctl()関数)

/procインターフェース
----------------------

* procファイルシステムはカーネル内の情報へのインターフェースとして利用される擬似的なファイルシステム
* ネットワーク関連の情報は「/proc/net」以下にある

==================== =============================
ファイル名             内容
==================== =============================
/proc/net/route      IPv4の経路テーブルを含む
/proc/net/ipv6_route IPv6の経路テーブルを含む
/proc/net/dev        ネットワークデバイスに関する情報を含む
/proc/net/if_inet6   ネットワークデバイスに設定されたIPv6アドレス一覧を含む
/proc/net/arp        IPv4アドレス解決用のARPテーブル情報一覧を含む
/proc/net/tcp        IPv4 TCPソケット一覧
/proc/net/tcp6       IPv6 TCPソケット一覧
/proc/net/udp        IPv4 UDPソケット一覧
/proc/net/udp6       IPv6 UCPソケット一覧
/proc/net/unix       UNIXドメインソケット一覧
/proc/net/sokestat   ソケッツ全体の統計情報
==================== =============================

引用
あきみち，”基礎と実装Linuxネットワークプログラミング”，株式会社品の出版，2010，pp.102-130.